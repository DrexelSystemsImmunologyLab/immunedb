#!/usr/bin/env python2
import sys
import argparse
import sldb.common.config as config

if __name__ == '__main__':
    parser = config.get_base_arg_parser('Identifies V and J genes from '
                                        'FASTA files', multiproc=True)
    parser.add_argument('v_germlines', help='FASTA file with IMGT gapped '
                        'V-gene germlines')
    parser.add_argument('j_germlines', help='FASTA file with J-gene '
                        'germlines. The final nucleotide in all genes must be '
                        'aligned. Sequence cannot contain any gaps.')
    parser.add_argument('upstream_of_cdr3', type=int, help='The number of '
                        ' nucleotides in the J germlines upstream of the CDR3')
    parser.add_argument('anchor_len', type=int, help='The number of '
                        'nucleotides at the end of the J germlines to use as '
                        'anchors.')
    parser.add_argument('min_anchor_len', type=int, help='The minimum number '
                        'of nucleotides in the J germline anchors required '
                        'to match the sequence.')
    parser.add_argument('base_dirs', nargs='+', help='Base directories for '
                        'samples.')
    parser.add_argument('--max-vties', type=int, default=50, help='Maximum '
                        'number of V-ties to allow in a valid sequence. '
                        'V-ties resulting in a name longer than 512 characters'
                        ' will be truncated. (Default: 50)')
    parser.add_argument('--min-similarity', type=int, default=60,
                        help='Minimum percent similarity to germline required '
                        'for valid sequences. (Default: 60)')
    parser.add_argument('--read-format', default='fastq',
                        help='Input format.  May be \'fasta\' or \'fastq\' '
                        '(Default: fastq)')

    args = parser.parse_args()
    if args.read_format not in ('fasta', 'fastq'):
        parser.error('Invalid read format {}'.format(args.read_format))
    if args.min_anchor_len > args.anchor_len:
        parser.error('Minimum anchor length must be <= total anchor length')

    session = config.init_db(args.master_db_config, args.data_db_config)

    from sldb.identification.identify import run_identify
    sys.exit(run_identify(session, args))
